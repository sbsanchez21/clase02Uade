Contenidos Clase 02:
======================


CSS3:
=====
¿Qué es CSS?
CSS (Cascading Style Sheets)
Es un lenguaje basado en reglas que permite definir cómo se deben mostrar los elementos HTML en una página web, utilizado para controlar la presentación y el diseño de páginas web.
Utiliza selectores para apuntar a elementos HTML y declaraciones para aplicar estilos (como colores, fuentes, márgenes, etc.).
No es un lenguaje de programación, sino un lenguaje de estilos que describe cómo deben renderizarse los elementos en la pantalla.


¿Para qué sirve CSS?
Controlar el diseño visual de una página web
Organizar el contenido
Crear diseños responsivos: adaptables y diferentes dispositivos, tablet, smartphone, tv, pc
Mejorar la experiencia del usuario
Separar el contenido de la presentación
Trabajar con frameworks y librerías: Bootstrap, Tailwind CSS 


¿Por que en cascada?
Los estilos se aplican en cascada:
	- Los estilos en línea tienen la máxima prioridad, seguidos de los estilos internos y, finalmente, los estilos externos
	- Los elementos HTML heredan propiedades CSS de sus elementos padres
	- Un selector ID (#id) tiene mayor prioridad que un selector de clase (.class), que a su vez tiene mayor especificidad que un selector de etiqueta (p).


- Referencia declaraciones CSS:
	- margin vs padding
	- em: toma como referencia unidad medida del padre
	  rem: La unidad rem tiene como referencia de medida el font-size del elemento root, la etiqueta <html> (en inglés sería como "root em").
	- posicionamiento
		static
		El elemento es posicionado de acuerdo al flujo normal del documento. Las propiedades top, right, bottom, left, and z-index no tienen efecto. Este es el valor por defecto.

		relative
		El elemento es posicionado de acuerdo al flujo normal del documento, y luego es desplazado con relación a sí mismo, con base en los valores de top, right, bottom, and left

		fixed
		El elemento es removido del flujo normal del documento, sin crearse espacio alguno para el elemento en el esquema de la página. Es posicionado con relación al bloque contenedor inicial establecido por el viewport o ventana gráfica

		absolute
		El elemento es removido del flujo normal del documento. Es posicionado relativo a su ancestro posicionado más cercano, si lo hay; de lo contrario, se ubica relativo al bloque contenedor inicial.

		sticky 
		El elemento es posicionado de acuerdo al flujo normal del documento, y luego es desplazado con relación a su ancestro que se desplace más cercano y su bloque contenedor

	- diplay: Su función principal es definir cómo se muestra un elemento en el flujo del documento, flujo normal es de izquierda a derecha y de abajo hacia arriba
		inline: ocupa el espacio necesario para su contenido
		block: uno abajo del otro 
		inline-block: se muestre en línea, pero también permite establecer su ancho y alto.
		none: no lo muestra
		flex: Activa el modelo de diseño flexible, que proporciona un control avanzado sobre la alineación y distribución de elementos dentro de un contenedor.
		grid:Activa el modelo de diseño de cuadrícula, que permite crear diseños bidimensionales con filas y columnas.

	- flexbox: 
		¿Para qué sirve Flexbox?
		Flexbox está diseñado para resolver problemas comunes de diseño web, como:
		Alineación vertical y horizontal:
		Distribución del espacio: 
		Diseño adaptable:
		Orden de los elementos:
		
		Contenedor padre ej:div debe tener display: flex;

		flex-direction define en qué dirección el contenedor quiere apilar los elementos flexibles.
		flex-wrap especifica si los elementos flexibles deben ajustarse o no a la pantalla
		flex-flow es una propiedad abreviada para establecer las propiedades flex-directiony flex-wrap
		justify-content se usa para alinear los elementos flex, horizontal
		align-items alineará los ítems sobre el eje de las x, vertical.


		Páginas para pracicar Flex:
		https://codepen.io/enxaneta/full/adLPwv
		https://css-tricks.com/snippets/css/a-guide-to-flexbox/
		http://flexboxfroggy.com/#es    
		

	- selectores avanzados
		- pseudoclases: Permiten seleccionar elementos en un estado específico
		- pseudoelementos: permiten seleccionar partes específicas de un elemento
		- combinados:
			/* selecciona todos los div dentro de span hijos nietos etc */
			span div { 
				background-color: lightgreen; 
			}

			
			Selecciona elementos que son hijos directos de otro elemento, no los nietos
			div > p { 
				background-color: red;
			}
			
			selecciona el primer párrafo que sigue inmediatamente a un h2.
			h2 + p

			selecciona todos los párrafos que siguen a un h2
			h2 ~ p 

		- Selectores de atributos
			Selecciona elementos que tienen un atributo con un valor específico.
			input[type="text"] 

			selecciona todos los links que en su atributo href contengan la palabra example	
			a[href*="example"] 

			Selecciona elementos que tengan un atributo que comience con cierto valor.
			a[href^="https"]

			Selecciona elementos que tengan un atributo que termine con cierto valor.
			img[src$=".jpg"]
			



	
- animaciones
    https://animate.style/     

    link stylesheet : https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css
    class="animate__animated animate__XX"
    custom properties

- font awesome
    https://fontawesome.com/    
    https://fontello.com/

- googlefonts
    https://fonts.google.com/

    link o import
    utilización selectores

- mediaqueries
    Consulta le medio donde se muestra la página mediante  @media se utilizan diferentes archivos css 
    ejemplo tablas responsive.html
    varios css
    un css

    bootstrap  y materialize



¿Que ocurre cuando solicitamos una página web? por ejemplo de google
1. El usuario introduce la URL en el navegador
2. Resolución DNS (Domain Name System): traducción de nombre domininio a ip, nslookup, ping
3. Establecimiento de la conexión (TCP/IP)
4. Solicitud HTTP (Request)
GET / HTTP/1.1
Host: www.google.com
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8


5.El servidor recibe la solicitud y la procesa:
6. Respuesta HTTP (Response)
HTTP/1.1 200 OK
Content-Type: text/html; charset=UTF-8
Content-Length: 1234

<!DOCTYPE html>
<html>
<head>
    <title>Google</title>
</head>
<body>
    <h1>Bienvenido a Google</h1>
</body>
</html>

Código de estado HTTP: 200 OK (indica que la solicitud fue exitosa).
Cabeceras (headers): Información adicional, como el tipo de contenido (text/html).
Cuerpo (body): El contenido de la página web (en este caso, el HTML).

7. Renderizado de la página en el navegador
El navegador recibe la respuesta y comienza a renderizar la página:
Procesa el HTML: 
Descarga recursos adicionales: Si el HTML incluye enlaces a archivos CSS, JavaScript, imágenes, etc., el navegador realiza solicitudes adicionales para obtener estos recursos.
Aplica estilos CSS: El navegador procesa los archivos CSS y aplica los estilos al DOM.
Ejecuta JavaScript: Si hay scripts, el navegador los ejecuta
Renderiza la página: Finalmente, el navegador muestra la página completa en la pantalla.
8. Interacción del usuario
Una vez que la página está cargada, el usuario puede interactuar con ella (hacer clic en enlaces, enviar formularios, etc.).


Framewoks css:
===============
Los frameworks de css permiten crear interfaces de usuario de manera rápida y eficiente
Los más populares: Bootstrap, Tailwind CSS, Bulma 

- ¿Que ocurre cuando solicitamos una página web? por ejemplo de google


Control de Versiones:
====================
¿Qué es el control de versiones y por qué es importante?
Es un sistema que permite gestionar y rastrear los cambios realizados en los archivos de un proyecto a lo largo del tiempo

Tipos de sistemas de control de versiones:
	-Sistemas de Control de Versiones Locales: 
		copias manuales de archivos
	-Sistemas de Control de Versiones Centralizados (CVCS) (ejemplo: SVN + TortoiseSVN o Integración con IDEs: Eclipse, IntelliJ IDEA o NetBeans): 
		servidor central que almacena todas las versiones de los archivos
		control de acceso y permisos
		historial de cambios centralizado
		dependencia del servidor central
	-Sistemas de Control de Versiones Distribuidos (DVCS) (ejemplo: Git). 
		cada desarrollador tiene una copia completa del repositorio
		No hay dependencia de un servidor central.

¿Para que sirve Git?
Sistema de control de versiones distribuido ampliamente utilizado para registrar cambios en archivos y coordinar el trabajo entre múltiples personas en proyectos de software
creado por Linus Torvalds en 2005 
	Rastrear cambios en el código.
	Trabajar en equipo de manera eficiente.
	Revertir errores y mantener un historial de cambios.
	Desarrollar nuevas características en ramas separadas.

¿Para qué Sirven GitHub y GitLab?
Alojar Repositorios Git, guardar el código fuente que están en la máquina de desarrollador
Colaboración en Equipo, trabajar en equipo


Instalación y config Git, Github:
	Instalar git: git bash, powershell, terminal vsc
	Configuración inicial: 
		git config --global user.name "Tu Nombre"
		git config --global user.email "tu@email.com"
	Verificación de la instalación: git --version
	Crear cuenta en github


Áreas de un Repositorio Git, Repo GitHub:
PC del desarrollador:	
	Working Directory (Directorio de Trabajo).
	Staging Area (Área de Preparación).
	Repository (Repositorio).

Repositorio en servidor remoto GitHub o GitLab:
	Repositorio Remoto (Opcional):



Working Directory (Directorio de Trabajo):
	Es la carpeta local en tu máquina donde trabajas con los archivos del proyecto.
	Aquí es donde editas, creas o eliminas archivos
	Los cambios aquí no están registrados por Git hasta que los agregas al Staging Area.

Staging Area (Área de Preparación).
	Es un área intermedia donde preparas los cambios que quieres incluir en el próximo commit
	Permite seleccionar qué cambios quieres incluir en el commit.
	Puedes agregar solo algunos archivos
	git add <archivo> 
	git add .

Repository (Repositorio)
	Es donde Git almacena todo el historial completo de cambios, ramas, tags y configuraciones
	git commit -m "Mensaje descriptivo" Guarda los cambios del Staging Area en el repositorio.


Repositorio Remoto (Opcional):	
	Donde se almacena tu repo local 
	git push


Comandos Básicos de Git
   - Inicializar un repositorio: `git init`. En VSC se ve un indicador
   - Ver el estado del repositorio: `git status`.
   - Agregar archivos al staging area: `git add <archivo>`.
   - Confirmar cambios: `git commit -m "Mensaje descriptivo"`.
   - Ver el historial de commits: `git log`.

Vincular un repo local a uno remoto y subir repo a Github:
	- crear repo en github o gitlab, obtener url
	- vincular repositorio
	git remote add origin https://github.com/sbsanchez21/clase02Uade.git
	- verificar si están vinculados 
	git remote -v
	- subir los cambios del repo local al remoto 
	git push -u origin main


Branches ramas en Git
   - ¿Qué es una rama y por qué usarla?
	Es una línea de desarrollo independiente que permite trabajar en nuevas funcionalidades, correcciones de errores o experimentos sin interferir con el código estable principal. 
   
   - Crear una rama: `git branch <nombre-rama>`.
	Estamos en la en la rama main y queremos crear una nueva rama para desarrollar una funcionalidad de login:
	git branch feature/login
	Esto crea una rama llamada feature/login, pero no cambia automáticamente a ella.

   - Cambiar de rama: `git checkout <nombre-rama>`.`git switch <nombre-rama>`.
	Este comando te permite moverte a una rama específica para empezar a trabajar en ella.
	git checkout feature/login
	git switch feature/login

   - Fusionar ramas: `git merge <nombre-rama>`.
	Supongamos que terminaste de desarrollar la funcionalidad de login en feature/login y quieres fusionarla con main:
   	git checkout main       # Cambias a la rama main
	git merge feature/login  # Fusionas feature/login en main
	Si no hay conflictos, Git fusionará automáticamente los cambios. Si hay conflictos, Git te pedirá que los resuelvas manualmente.

   - Eliminar una rama: `git branch -d <nombre-rama>`.
	Después de fusionar feature/login con main, ya no necesitas la rama feature/login. Para eliminarla:
	git branch -d feature/login

	Ejemplo completo de flujo de trabajo con ramas:
	================================================
	Crear una nueva rama para una funcionalidad:
	git branch feature/login
	git checkout feature/login

	Verifico en que rama estoy
	git branch

	Hacer cambios y confirmarlos:
	git add .
	git commit -m "Añadir funcionalidad de login"
	
	Fusionar la rama con main:
	git checkout main
	git merge feature/login

	Eliminar la rama después de fusionar:
	git branch -d feature/login


Trabajo con Repositorios Remotos
   - Clonar un repositorio remoto: `git clone <url-repositorio>`.
   - Vincular un repositorio remoto: `git remote add origin <url-repositorio>`.
   - Enviar cambios al repositorio remoto: `git push origin <nombre-rama>`.
   - Traer cambios del repositorio remoto: `git pull origin <nombre-rama>`.
   - Ver repositorios remotos: `git remote -v`.

Resolución de Conflictos
   - ¿Qué es un conflicto y cómo se produce?
   - Identificar conflictos: `git status`.
   - Resolver conflictos manualmente (editar archivos conflictivos).
   - Marcar conflictos como resueltos: `git add <archivo>`.
   - Finalizar la fusión: `git commit`.

Deshacer Cambios
   - Deshacer cambios en el working directory: `git checkout -- <archivo>`.
   - Deshacer cambios en el staging area: `git reset <archivo>`.
   - Deshacer commits: `git reset --soft`, `git reset --mixed`, `git reset --hard`.
   - Revertir un commit: `git revert <hash-commit>`.


Integración de Git con Java
   - Uso de `.gitignore` para excluir archivos (ejemplo: `target/`, `.classpath`, `.project`).

Buenas Prácticas en el Control de Versiones
   - Escribir mensajes de commit claros y descriptivos.
   - Mantener commits atómicos (un cambio por commit).
   - Evitar archivos binarios en el repositorio.
   - Revisar el historial de cambios antes de fusionar ramas.

